/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from "@solana/web3.js";
import * as beet from "@metaplex-foundation/beet";
import * as beetSolana from "@metaplex-foundation/beet-solana";

/**
 * Arguments used to create {@link Crank}
 * @category Accounts
 * @category generated
 */
export type CrankArgs = {
  bump: number;
  signer: web3.PublicKey;
  fee: beet.bignum;
};

export const crankDiscriminator = [128, 36, 249, 235, 84, 210, 172, 166];
/**
 * Holds the data for the {@link Crank} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Crank implements CrankArgs {
  private constructor(
    readonly bump: number,
    readonly signer: web3.PublicKey,
    readonly fee: beet.bignum,
  ) {}

  /**
   * Creates a {@link Crank} instance from the provided args.
   */
  static fromArgs(args: CrankArgs) {
    return new Crank(args.bump, args.signer, args.fee);
  }

  /**
   * Deserializes the {@link Crank} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0,
  ): [Crank, number] {
    return Crank.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Crank} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,
  ): Promise<Crank> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig,
    );
    if (accountInfo == null) {
      throw new Error(`Unable to find Crank account at ${address}`);
    }
    return Crank.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      "2yKYJeX7NDF6gSHANJqnxHuAuHuBx5Qf3s9oAmMpWzxh",
    ),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, crankBeet);
  }

  /**
   * Deserializes the {@link Crank} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Crank, number] {
    return crankBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link Crank} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return crankBeet.serialize({
      accountDiscriminator: crankDiscriminator,
      ...this,
    });
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Crank}
   */
  static get byteSize() {
    return crankBeet.byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Crank} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Crank.byteSize,
      commitment,
    );
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link Crank} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === Crank.byteSize;
  }

  /**
   * Returns a readable version of {@link Crank} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      bump: this.bump,
      signer: this.signer.toBase58(),
      fee: (() => {
        const x = <{ toNumber: () => number }>this.fee;
        if (typeof x.toNumber === "function") {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const crankBeet = new beet.BeetStruct<
  Crank,
  CrankArgs & {
    accountDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ["accountDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)],
    ["bump", beet.u8],
    ["signer", beetSolana.publicKey],
    ["fee", beet.u64],
  ],
  Crank.fromArgs,
  "Crank",
);
