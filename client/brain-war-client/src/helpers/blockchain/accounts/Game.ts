/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from "@metaplex-foundation/beet";
import * as web3 from "@solana/web3.js";
import * as beetSolana from "@metaplex-foundation/beet-solana";
import { GameStatus, gameStatusBeet } from "../types/GameStatus";

/**
 * Arguments used to create {@link Game}
 * @category Accounts
 * @category generated
 */
export type GameArgs = {
  bump: number;
  gameId: beet.bignum;
  entryFee: beet.bignum;
  mint: web3.PublicKey;
  startTime: beet.COption<beet.bignum>;
  waitingForPlayersStartTime: beet.COption<beet.bignum>;
  winner: beet.COption<web3.PublicKey>;
  gameStatus: GameStatus;
  waitForPlayersLimit: beet.bignum;
  playersActions: web3.PublicKey;
  hashedLimit: beet.bignum;
  reveledLimit: beet.COption<beet.bignum>;
  reveledSalt: beet.COption<beet.bignum>;
  latestTimestamp: beet.bignum;
};

export const gameDiscriminator = [27, 90, 166, 125, 74, 100, 121, 18];
/**
 * Holds the data for the {@link Game} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Game implements GameArgs {
  private constructor(
    readonly bump: number,
    readonly gameId: beet.bignum,
    readonly entryFee: beet.bignum,
    readonly mint: web3.PublicKey,
    readonly startTime: beet.COption<beet.bignum>,
    readonly waitingForPlayersStartTime: beet.COption<beet.bignum>,
    readonly winner: beet.COption<web3.PublicKey>,
    readonly gameStatus: GameStatus,
    readonly waitForPlayersLimit: beet.bignum,
    readonly playersActions: web3.PublicKey,
    readonly hashedLimit: beet.bignum,
    readonly reveledLimit: beet.COption<beet.bignum>,
    readonly reveledSalt: beet.COption<beet.bignum>,
    readonly latestTimestamp: beet.bignum,
  ) {}

  /**
   * Creates a {@link Game} instance from the provided args.
   */
  static fromArgs(args: GameArgs) {
    return new Game(
      args.bump,
      args.gameId,
      args.entryFee,
      args.mint,
      args.startTime,
      args.waitingForPlayersStartTime,
      args.winner,
      args.gameStatus,
      args.waitForPlayersLimit,
      args.playersActions,
      args.hashedLimit,
      args.reveledLimit,
      args.reveledSalt,
      args.latestTimestamp,
    );
  }

  /**
   * Deserializes the {@link Game} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0,
  ): [Game, number] {
    return Game.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Game} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,
  ): Promise<Game> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig,
    );
    if (accountInfo == null) {
      throw new Error(`Unable to find Game account at ${address}`);
    }
    return Game.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      "2yKYJeX7NDF6gSHANJqnxHuAuHuBx5Qf3s9oAmMpWzxh",
    ),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, gameBeet);
  }

  /**
   * Deserializes the {@link Game} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Game, number] {
    return gameBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link Game} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return gameBeet.serialize({
      accountDiscriminator: gameDiscriminator,
      ...this,
    });
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Game} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: GameArgs) {
    const instance = Game.fromArgs(args);
    return gameBeet.toFixedFromValue({
      accountDiscriminator: gameDiscriminator,
      ...instance,
    }).byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Game} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: GameArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Game.byteSize(args),
      commitment,
    );
  }

  /**
   * Returns a readable version of {@link Game} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      bump: this.bump,
      gameId: (() => {
        const x = <{ toNumber: () => number }>this.gameId;
        if (typeof x.toNumber === "function") {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      entryFee: (() => {
        const x = <{ toNumber: () => number }>this.entryFee;
        if (typeof x.toNumber === "function") {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      mint: this.mint.toBase58(),
      startTime: this.startTime,
      waitingForPlayersStartTime: this.waitingForPlayersStartTime,
      winner: this.winner,
      gameStatus: "GameStatus." + GameStatus[this.gameStatus],
      waitForPlayersLimit: (() => {
        const x = <{ toNumber: () => number }>this.waitForPlayersLimit;
        if (typeof x.toNumber === "function") {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      playersActions: this.playersActions.toBase58(),
      hashedLimit: (() => {
        const x = <{ toNumber: () => number }>this.hashedLimit;
        if (typeof x.toNumber === "function") {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      reveledLimit: this.reveledLimit,
      reveledSalt: this.reveledSalt,
      latestTimestamp: (() => {
        const x = <{ toNumber: () => number }>this.latestTimestamp;
        if (typeof x.toNumber === "function") {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const gameBeet = new beet.FixableBeetStruct<
  Game,
  GameArgs & {
    accountDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ["accountDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)],
    ["bump", beet.u8],
    ["gameId", beet.u64],
    ["entryFee", beet.u64],
    ["mint", beetSolana.publicKey],
    ["startTime", beet.coption(beet.u64)],
    ["waitingForPlayersStartTime", beet.coption(beet.u64)],
    ["winner", beet.coption(beetSolana.publicKey)],
    ["gameStatus", gameStatusBeet],
    ["waitForPlayersLimit", beet.u64],
    ["playersActions", beetSolana.publicKey],
    ["hashedLimit", beet.u64],
    ["reveledLimit", beet.coption(beet.u64)],
    ["reveledSalt", beet.coption(beet.u64)],
    ["latestTimestamp", beet.u64],
  ],
  Game.fromArgs,
  "Game",
);
